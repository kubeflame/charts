# Lutho's authentication type: kubeconfig | access-token | in-cluster
authType: "in-cluster"

replicaCount: 1

image:
  repository: kubeflame/lutho
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true
  # empty for cluster-wide
  # input one or more namespaces to grant access only to those specific namespaces
  accessNamespaces: []
  # grant access to list namespaces at the cluster scope if there are `accessNamespaces` set
  canListNamespaces: false
  aggregationRule: {}
    # clusterRoleSelectors:
    # - matchLabels:
    #     rbac.example.com/aggregate-to-monitoring: "true"
  rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotationsPrefix: "nginx.ingress.kubernetes.io"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # set the timeout for websocket connections (in seconds)
  proxyTimeout: "3600"
  host: localhost
  path: "/"
  pathType: ImplementationSpecific
  tls: []
  # - secretName: chart-example-tls
  #   hosts:
  #   - chart-example.local

resources: {}
  # If you do want to specify resources, uncomment the following lines,
  # adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRole
  #   metadata:
  #     # "namespace" omitted since ClusterRoles are not namespaced
  #     name: secret-reader
  #   rules:
  #   - apiGroups: [""]
  #     #
  #     # at the HTTP level, the name of the resource for accessing Secret
  #     # objects is "secrets"
  #     resources: ["secrets"]
  #     verbs: ["get", "watch", "list"]
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   # This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
  #   kind: ClusterRoleBinding
  #   metadata:
  #     name: read-secrets-global
  #   subjects:
  #   - kind: Group
  #     name: manager # Name is case sensitive
  #     apiGroup: rbac.authorization.k8s.io
  #   roleRef:
  #     kind: ClusterRole
  #     name: secret-reader
  #     apiGroup: rbac.authorization.k8s.io
